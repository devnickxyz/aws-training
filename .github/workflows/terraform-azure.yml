name: "Terraform workflow for Azure RGs just testing"

on:
  push:
    branches:
      - main
      - feature/init-terraform
    # paths:
    #   - azure/dev/*
  pull_request:
    branches:
      - main
    paths:
    - azure/dev/*

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  # ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: "ubuntu-latest"
    # permissions:
    #   pull-requests: write
    defaults:
      run:
        shell: bash
        working-directory: "./azure/dev"
        
    steps:
      - name: "checkout git repository"
        uses: actions/checkout@v3

      # - name: 'Az CLI login'
      #   uses: azure/login@v1
      #   with:
      #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Terraform init
        id: init
        run: terraform init
 
      - name: Terraform format
        id: fmt
        run: terraform fmt -check
    
      - name: Terraform validate
        id: validate
        run: terraform validate
  
      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
      
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            return "Hello!"
            # const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            # #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            # #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            # #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
  
            # <details><summary>Show Plan</summary>
  
            # \`\`\`\n
            # ${process.env.PLAN}
            # \`\`\`
  
            # </details>
            # *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
  
            # github.rest.issues.createComment({
            #   issue_number: context.issue.number,
            #   owner: context.repo.owner,
            #   repo: context.repo.repo,
            #   body: output
            # })
  
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
  
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false